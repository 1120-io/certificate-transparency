sslconnect_test.sh does an end-to-end demo of creating a server
certificate, sending it to the log server and getting back a log
proof, serving the certificate and proof with Apache, and verifying
the log proof.

To run sslconnect_test, you will need to do the following:

1. Compile the log server and client, following the instructions in src/README.

2. To run a test SSL server, you will also need Apache. On Debian based
systems, running

$ sudo apt-get install apache2

should suffice. On other systems, you may also need to modify the
Makefile and/or the httpd.conf.

3. Make platform dependent links:

$ make <platform>-links

e.g. "make linux-links"

4. Run the test. If your system's OpenSSL is older than 1.0.0, you
have to point the test to a more recent local binary

$ MY_OPENSSL=$my_recent_openssl_bin ./sslconnect_test.sh

This does the following steps:

a) Create a CA root certificate and issue a CA ProtoCert signing
certificate.

b) Create a client Certificate Signing Request (CSR).

c1) Sign the CSR with the CA root certificate. Submit the certificate
to the log server, retrieve a proof, and embed it in a superfluous
certificate.

c2) Sign the CSR with the CA ProtoCert signing key and submit the
signed request to the log server. Retrieve a proof, embed it in the
leaf certificate and sign the certificate with the CA root key.

d) Run two Apache VirtualHosts with the resulting client certificates.

e) Connect a CT-enabled SSL client to the server and verify the proofs.

The client should report something like this:

Connecting to 127.0.0.1:8125.
Proof extension found in certificate, verifying...OK
Log proof verified.
Connected.
Cached new checkpoint.
PASS
