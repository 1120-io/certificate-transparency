sslconnect_test.sh does an end-to-end demo of creating a server
certificate, sending it to the log server and getting back a log
proof, serving the certificate and proof with Apache, and verifying
the log proof.

To run sslconnect_test, you will need to do the following:

1. Compile the log server and client, following the instructions in src/README.

2. To run a test SSL server, you will also need Apache. On Debian based
systems, running

$ sudo apt-get install apache2

should suffice. On other systems, you may also need to modify the
Makefile and/or the httpd.conf.

For the following steps you should be in the directory where
this README resides.

3. Make platform dependent links:

$ make <platform>-links

Currently, linux-links and freebsd-links are defined.

4. Optionally, you can also test the authz extension. Since this code is only
in the development versions of OpenSSL and Apache, you'll need to build them
yourself. Check out OpenSSL 1.0.2 or higher and build that. You'll also need to
install it somewhere. Check out the head of Apache, and configure it like:

$ ./configure --enable-ssl --with-ssl=<path to your install>

$ make APACHEDIR=<path to httpd> local-links

5. Run the test

$ ./sslconnect_test.sh

This first runs client regression tests against existing certificates.
Secondly, the test generates fresh test certificates and tests
a) The submission of certificates and precertificates to the log server,
   and the retrieval of initial Signed Certificate Timestamps;
b) Serving Signed Certificate Timestamps in a TLS handshake; and
c) Retrieving audit proofs for those SCTs from the log server.

In the end, the tests should report something like this:

PASSED 35 tests
FAILED 0 tests
SKIPPED 0 tests

Or, if you did not configure a local Apache, you will see some skipped
tests.
