1. To build the log server, you need OpenSSL >= 1.0.0.

To find out your system version of OpenSSL:

$ openssl version

If the system version of OpenSSL is appropriate, then you can skip
this step.

Else you have to make a local version. To build a local version on
Linux, download and unpack OpenSSL source
(http://www.openssl.org/source/) and, in the openssl directory, run

$ ./config shared
$ make

2. You also need googletest, which you can get from here:
http://code.google.com/p/googletest/downloads/list.

You also need to install cmake, to build gtest:
http://www.cmake.org/

Unpack googletest, but don't build it yet. Upstream recommends to build
a new copy from source for each package to be tested. We follow this
advice in our Makefile, which builds gtest automatically.

Some systems make the gtest sources available as a package; on Debian
this is in the libgtest-dev package and GTESTDIR = /usr/src/gtest. Our
Makefile looks at this location by default.

(Tested with gtest-1.6.0)

3. You will also need protobuf, from:
http://code.google.com/p/protobuf/downloads/list.

(Tested with protobuf-2.4.1)

Download, unpack, and follow the instructions to build and install.

4. You will also need gflags and glog, from:
http://code.google.com/p/gflags/
and
http://code.google.com/p/google-glog/

(Tested with gflags-1.6, gflags-2.0 and glog 0.3.1 and 0.3.2)

Download, unpack, and follow the instructions to build and install.
Be sure to install gflags before building and installing glog to avoid link
errors later on.

5. And you will need a copy of sqlite3 installed on your system.

5a. And the curlpp library (http://code.google.com/p/curlpp/). Before
building and installing, you should apply the patch mentioned here:
https://code.google.com/p/curlpp/issues/detail?id=25
curlpp's dependencies are libcurl and boost. On Debian, these packages
should be installed:
  libcurl4-openssl-dev libboost-dev

(Tested with curlpp-0.7.3)

5b. And the JSON-C library, v0.10.
(https://github.com/json-c/json-c/wiki - tarball is
https://github.com/downloads/json-c/json-c/json-c-0.10.tar.gz).

5c. And if you want to use client/upload_server_cert.sh you may need
the python modules pyasn1 and pyasn1-modules, which can be installed
with easy_install or pip. On Debian, this dependency can be satisfied
by installing the 'python-pyasn1' package directly.

5d. Also, cpp-netlib v0.10.1, available from http://cpp-netlib.org/.
cpp-netlib is built using 'cmake . && make' and requires the following Boost packages:
  libboost-test-dev libboost-system-dev libboost-regex-dev libboost-date-time-dev libboost-thread-dev libboost-filesystem-dev  libboost-program-options-dev libboost-chrono-dev
In case cpp-netlib cannot be installed using 'make install', use CPPNETLIBDIR (see below).

6. Then, you can build the log server by pointing to your custom OpenSSL
and/or gtest (if needed):

$ make OPENSSLDIR=<path to openssl> GTESTDIR=<path to gtest> CPPNETLIBDIR=<path to cpp-netlib>

Once more, use gmake on BSD systems.

7. Finally, run unit tests:

$ make OPENSSLDIR=<path to openssl> GTESTDIR=<path to gtest> test

If the build still fails because of missing libraries, you may need to set the
environment variable LD_LIBRARY_PATH. On Linux, if you did not change the
default installation path (such as "/usr/local/lib"), running
$ ldconfig
or, if needed,
$ sudo ldconfig
should resolve the problem.

-----END-TO-END TESTS-----

8. For end-to-end server-client tests, you will need to install Apache
and point the tests to it. See test/README for how to do so.

-----TESTING AND LOGGING OPTIONS-----

Note that several tests write files on disk. The default directory for
storing temporary testdata is /tmp. You can change
this by setting TMPDIR=<tmpdir> for make.

End-to-end tests also create temporary certificate and server files in
src/test/tmp
All these files are cleaned up after a successful test run.

For logging options, see
http://google-glog.googlecode.com/svn/trunk/doc/glog.html

By default, unit tests log to stderr, and log only messages with a FATAL level
(i.e., those that result in abnormal program termination).
You can override the defaults with command-line flags.

End-to-end tests log everything at INFO level and above.
