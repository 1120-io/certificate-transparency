syntax = "proto2";

package ct;

////////////////////////////////////////////////////////////////////////////////
// These protocol buffers should be kept aligned with the I-D.                //
////////////////////////////////////////////////////////////////////////////////

// RFC 5246
message DigitallySigned {
  enum HashAlgorithm {
    NONE = 0;
    MD5 = 1;
    SHA1 = 2;
    SHA224 = 3;
    SHA256 = 4;
    SHA384 = 5;
    SHA512 = 6;
  }

  enum SignatureAlgorithm {
    ANONYMOUS = 0;
    RSA = 1;
    DSA = 2;
    ECDSA = 3;
  }

  // 1 byte
  optional HashAlgorithm hash_algorithm = 1 [ default = NONE ];
  // 1 byte
  optional SignatureAlgorithm sig_algorithm = 2 [ default = ANONYMOUS ];
  // 0..2^16-1 bytes
  optional bytes signature = 3;
}

enum LogEntryType {
  X509_ENTRY = 0;
  PRECERT_ENTRY = 1;
  // Not part of the I-D, and outside the valid range.
  UNKNOWN_ENTRY_TYPE = 65536;
}

message X509ChainEntry {
  // <1..2^24-1>
  optional bytes leaf_certificate = 1;
  // <0..2^24-1>
  // A chain from the leaf to a trusted root
  // (excluding leaf and possibly root).
  repeated bytes certificate_chain = 2;
}

message PrecertChainEntry {
  // <0..2^24-1>
  optional bytes tbs_certificate = 1;
  // <1..2^24-1>
  // The full original pre-cert chain, as submitted by the CA.
  repeated bytes precertificate_chain = 2;
}

message LogEntry {
  optional LogEntryType type = 1 [ default = UNKNOWN_ENTRY_TYPE ];

  optional X509ChainEntry x509_entry = 2;

  optional PrecertChainEntry precert_entry = 3;
}

enum SignatureType {
  CERTIFICATE_TIMESTAMP = 0;
  // TODO(ekasper): called tree_hash in I-D.
  TREE_HEAD = 1;
}

enum Version {
  V1 = 0;
  // Not part of the I-D, and outside the valid range.
  UNKNOWN_VERSION = 256;
}

message LogID {
  // 32 bytes
  optional bytes key_id = 1;
}

// TODO(ekasper): implement support for id.
message SignedCertificateTimestamp {
  optional Version version = 1 [ default = UNKNOWN_VERSION ];
  optional LogID id = 2;
  // UTC time in milliseconds, since January 1, 1970, 00:00.
  optional uint64 timestamp = 3;
  optional DigitallySigned signature = 4;
  optional bytes extension = 5;
}

message SignedCertificateTimestampList {
  // One or more SCTs, <1..2^16-1> bytes each
  repeated bytes sct_list = 1;
}

enum MerkleLeafType {
  TIMESTAMPED_ENTRY = 0;
  UNKNOWN_LEAF_TYPE = 256;
}

message TimestampedEntry {
  optional uint64 timestamp = 1;
  optional LogEntryType entry_type = 2;
  optional bytes certificate = 3;
  optional bytes extension = 4;
} 

// Stuff that's hashed into a Merkle leaf.
message MerkleTreeLeaf {
  // The version of the corresponding SCT.
  optional Version version = 1 [ default = UNKNOWN_VERSION ];
  optional MerkleLeafType type = 2 [ default = UNKNOWN_LEAF_TYPE ];
  optional TimestampedEntry timestamped_entry = 3;
}

// TODO(ekasper): implement support for id.
message MerkleAuditProof {
  optional Version version = 1 [ default = UNKNOWN_VERSION ];
  optional LogID id = 2;
  optional uint64 tree_size = 3;
  optional uint64 timestamp = 4;
  optional uint64 leaf_index = 5;
  repeated bytes path_node = 6;
  optional DigitallySigned tree_head_signature = 7;
}

////////////////////////////////////////////////////////////////////////////////
// The following are not in the I-D (yet) but should end up there.            //
// For now they serve as a quick documentation for protocol messages          //
// we intend to support.                                                      //
////////////////////////////////////////////////////////////////////////////////
message ClientLookup {
  enum Type {
    MERKLE_AUDIT_PROOF_BY_TIMESTAMP_AND_HASH = 1;
  }
  required Type type = 1;
  optional uint64 certificate_timestamp = 2;
  optional bytes certificate_sha256_hash = 3;
}

// Server-client messages
message ClientMessage {
  enum ClientCommand {
    // Upload a certificate bundle, and retrieve
    // a submission token, or an audit proof.
    SUBMIT_BUNDLE = 1;
    SUBMIT_CA_BUNDLE = 2;
    LOOKUP_AUDIT_PROOF = 3;
  }
  required ClientCommand command = 1;
  optional bytes submission_data = 2;
  optional ClientLookup lookup = 3;
}

message ServerError {
  enum ErrorCode {
    BAD_VERSION = 0;
    UNSUPPORTED_FORMAT = 1;
    INVALID_MESSAGE = 2;
    UNSUPPORTED_COMMAND = 3;
    REJECTED = 4;
    NOT_FOUND = 5;
  }
  required ErrorCode code = 1;
  optional string error_message = 2;
}

message ServerMessage {
  // The server's response codes.
  enum ServerResponse {
    ERROR = 0;
    SIGNED_CERTIFICATE_TIMESTAMP = 1;
    MERKLE_AUDIT_PROOF = 2;
  }
  required ServerResponse response = 1;
  // Normally only one of those will be set.
  optional ServerError error = 2;
  optional SignedCertificateTimestamp sct = 3;
  optional MerkleAuditProof merkle_proof = 4;
}

////////////////////////////////////////////////////////////////////////////////
// Finally, stuff that's not in the I-D but that we use internally            //
// for logging entries and tree head state.                                   //
////////////////////////////////////////////////////////////////////////////////
message LoggedCertificate {
  optional SignedCertificateTimestamp sct = 1;
  optional bytes certificate_sha256_hash = 2;
  optional uint64 sequence_number = 3;
  optional LogEntry entry = 4;
}

message SignedTreeHead {
  // The version of the tree head signature.
  // (Note that each leaf has its own version, so a V2 tree
  // can contain V1 leaves, too.
  optional Version version = 1 [ default = UNKNOWN_VERSION ];
  optional LogID id = 2;
  optional uint64 timestamp = 3;
  optional uint64 tree_size = 4;
  optional bytes root_hash = 5;
  optional DigitallySigned signature = 6;
}

// Stuff the SSL client spits out from a connection.
message SSLClientCTData {
  optional LogEntry reconstructed_entry = 1;
  optional bytes certificate_sha256_hash = 2;
  repeated SignedCertificateTimestamp attached_sct = 3;
}
